<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="d9/d6e/class_canberra_1_1_utility_1_1_core_1_1_list_base" kind="class" language="C++" prot="public">
    <compoundname>Canberra::Utility::Core::ListBase</compoundname>
    <derivedcompoundref refid="de/d13/class_canberra_1_1_utility_1_1_core_1_1_serializable_list_base" prot="public" virt="non-virtual">Canberra::Utility::Core::SerializableListBase&lt; T, NumType &gt;</derivedcompoundref>
    <includes refid="da/d23/list_8h" local="no">list.h</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>class</type>
        <declname>NumType</declname>
        <defname>NumType</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="d9/d6e/class_canberra_1_1_utility_1_1_core_1_1_list_base_1a07367730f182c6b9c02aa566b76b152f" prot="protected" static="no" mutable="no">
        <type>T *</type>
        <definition>T* Canberra::Utility::Core::ListBase&lt; T, NumType &gt;::_List</definition>
        <argsstring></argsstring>
        <name>_List</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Project1/Dependencies/Canberra_V2/include/list.h" line="16" column="1" bodyfile="Project1/Dependencies/Canberra_V2/include/list.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/d6e/class_canberra_1_1_utility_1_1_core_1_1_list_base_1a35fd987bd3f0ae3fb917b838c1a2ee85" prot="protected" static="no" mutable="no">
        <type>NumType</type>
        <definition>NumType Canberra::Utility::Core::ListBase&lt; T, NumType &gt;::_Num</definition>
        <argsstring></argsstring>
        <name>_Num</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Project1/Dependencies/Canberra_V2/include/list.h" line="17" column="1" bodyfile="Project1/Dependencies/Canberra_V2/include/list.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="d9/d6e/class_canberra_1_1_utility_1_1_core_1_1_list_base_1ad8b3c4d1f6cbba04f6495d5d13a6f0b5" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Canberra::Utility::Core::ListBase&lt; T, NumType &gt;::Copy</definition>
        <argsstring>(const ListBase&lt; T, NumType &gt; &amp;v)</argsstring>
        <name>Copy</name>
        <param>
          <type>const <ref refid="d9/d6e/class_canberra_1_1_utility_1_1_core_1_1_list_base" kindref="compound">ListBase</ref>&lt; T, NumType &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>This method will perform a deep copy /summary&gt; param name=&quot;v&quot;&gt;The list to copy</para><para>returns&gt;0==Success</para><para>exception cref=&quot;ULONG&quot;&gt;Error code</para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Project1/Dependencies/Canberra_V2/include/list.h" line="25" column="1" bodyfile="Project1/Dependencies/Canberra_V2/include/list.h" bodystart="25" bodyend="40"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d9/d6e/class_canberra_1_1_utility_1_1_core_1_1_list_base_1aba1876d4b041d1d3efa90d404bb6ba5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Canberra::Utility::Core::ListBase&lt; T, NumType &gt;::ListBase</definition>
        <argsstring>(const ListBase&lt; T, NumType &gt; &amp;v)</argsstring>
        <name>ListBase</name>
        <param>
          <type>const <ref refid="d9/d6e/class_canberra_1_1_utility_1_1_core_1_1_list_base" kindref="compound">ListBase</ref>&lt; T, NumType &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Project1/Dependencies/Canberra_V2/include/list.h" line="25" column="1" bodyfile="Project1/Dependencies/Canberra_V2/include/list.h" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="d9/d6e/class_canberra_1_1_utility_1_1_core_1_1_list_base_1a7e4d30726d87a96b7d9be1236f661ba3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Canberra::Utility::Core::ListBase&lt; T, NumType &gt;::ListBase</definition>
        <argsstring>()</argsstring>
        <name>ListBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Project1/Dependencies/Canberra_V2/include/list.h" line="25" column="1" bodyfile="Project1/Dependencies/Canberra_V2/include/list.h" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="d9/d6e/class_canberra_1_1_utility_1_1_core_1_1_list_base_a280204e71e12060a321cc5e12753e65d_1a280204e71e12060a321cc5e12753e65d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual Canberra::Utility::Core::ListBase&lt; T, NumType &gt;::~ListBase</definition>
        <argsstring>()</argsstring>
        <name>~ListBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>summary&gt; Allow for deep copy for = operator /summary&gt; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Project1/Dependencies/Canberra_V2/include/list.h" line="25" column="1" bodyfile="Project1/Dependencies/Canberra_V2/include/list.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="d9/d6e/class_canberra_1_1_utility_1_1_core_1_1_list_base_a56a9f21b1e389b0b057ed3a200130b91_1a56a9f21b1e389b0b057ed3a200130b91" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/d6e/class_canberra_1_1_utility_1_1_core_1_1_list_base" kindref="compound">ListBase</ref>&lt; T, NumType &gt; &amp;</type>
        <definition>ListBase&lt;T, NumType&gt;&amp; Canberra::Utility::Core::ListBase&lt; T, NumType &gt;::operator=</definition>
        <argsstring>(const ListBase&lt; T, NumType &gt; &amp;Rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="d9/d6e/class_canberra_1_1_utility_1_1_core_1_1_list_base" kindref="compound">ListBase</ref>&lt; T, NumType &gt; &amp;</type>
          <declname>Rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>summary&gt; This method will add a new item to the list /summary&gt; param name=&quot;v&quot;&gt;The item to add</para><para>exception cref=&quot;ULONG&quot;&gt;Error code</para><para>returns&gt;0==Success</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Project1/Dependencies/Canberra_V2/include/list.h" line="50" column="1" bodyfile="Project1/Dependencies/Canberra_V2/include/list.h" bodystart="50" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="d9/d6e/class_canberra_1_1_utility_1_1_core_1_1_list_base_aaacf0eb537ee5765a6929dc4dd42c04b_1aaacf0eb537ee5765a6929dc4dd42c04b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ULONG</type>
        <definition>ULONG Canberra::Utility::Core::ListBase&lt; T, NumType &gt;::Add</definition>
        <argsstring>(const T &amp;v)</argsstring>
        <name>Add</name>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>summary&gt; This method will clear the list /summary&gt; param name=&quot;v&quot;&gt;The item to add</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Project1/Dependencies/Canberra_V2/include/list.h" line="58" column="1" bodyfile="Project1/Dependencies/Canberra_V2/include/list.h" bodystart="58" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="d9/d6e/class_canberra_1_1_utility_1_1_core_1_1_list_base_ab8431d144c5e017b9e06502549f26833_1ab8431d144c5e017b9e06502549f26833" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Canberra::Utility::Core::ListBase&lt; T, NumType &gt;::Clear</definition>
        <argsstring>()</argsstring>
        <name>Clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>summary&gt; This method will get a item from the list /summary&gt; param name=&quot;i&quot;&gt;The item index</para><para>param name=&quot;v&quot;&gt;The item value</para><para>exception cref=&quot;ULONG&quot;&gt;Error code</para><para>returns&gt;0==Success</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Project1/Dependencies/Canberra_V2/include/list.h" line="83" column="1" bodyfile="Project1/Dependencies/Canberra_V2/include/list.h" bodystart="83" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="d9/d6e/class_canberra_1_1_utility_1_1_core_1_1_list_base_a2349c775780c9b7441411c96318a6639_1a2349c775780c9b7441411c96318a6639" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; Canberra::Utility::Core::ListBase&lt; T, NumType &gt;::GetItem</definition>
        <argsstring>(NumType i)</argsstring>
        <name>GetItem</name>
        <param>
          <type>NumType</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>summary&gt; This method will return the number of items in the list /summary&gt; returns&gt;Number of</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Project1/Dependencies/Canberra_V2/include/list.h" line="92" column="1" bodyfile="Project1/Dependencies/Canberra_V2/include/list.h" bodystart="92" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="d9/d6e/class_canberra_1_1_utility_1_1_core_1_1_list_base_1a0385763ebdcfda55e401ba477fb78ed0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ULONG</type>
        <definition>ULONG Canberra::Utility::Core::ListBase&lt; T, NumType &gt;::GetNumberOfItems</definition>
        <argsstring>()</argsstring>
        <name>GetNumberOfItems</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Project1/Dependencies/Canberra_V2/include/list.h" line="105" column="1" bodyfile="Project1/Dependencies/Canberra_V2/include/list.h" bodystart="105" bodyend="105"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This template is used to create a simple list. STL is not used here because the intention is to use this class for exporting from DLL&apos;s. /summary&gt; </para>    </briefdescription>
    <detaileddescription>
<para>summary&gt; This provides basic list support /summary&gt; </para>    </detaileddescription>
    <inheritancegraph>
      <node id="191">
        <label>Canberra::Utility::Core::SerializableListBase&lt; T, NumType &gt;</label>
        <link refid="de/d13/class_canberra_1_1_utility_1_1_core_1_1_serializable_list_base"/>
        <childnode refid="190" relation="public-inheritance">
        </childnode>
      </node>
      <node id="190">
        <label>Canberra::Utility::Core::ListBase&lt; T, NumType &gt;</label>
        <link refid="d9/d6e/class_canberra_1_1_utility_1_1_core_1_1_list_base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="194">
        <label>T</label>
      </node>
      <node id="193">
        <label>NumType</label>
      </node>
      <node id="192">
        <label>Canberra::Utility::Core::ListBase&lt; T, NumType &gt;</label>
        <link refid="d9/d6e/class_canberra_1_1_utility_1_1_core_1_1_list_base"/>
        <childnode refid="193" relation="usage">
          <edgelabel>_Num</edgelabel>
        </childnode>
        <childnode refid="194" relation="usage">
          <edgelabel>_List</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="Project1/Dependencies/Canberra_V2/include/list.h" line="14" column="1" bodyfile="Project1/Dependencies/Canberra_V2/include/list.h" bodystart="14" bodyend="107"/>
    <listofallmembers>
      <member refid="d9/d6e/class_canberra_1_1_utility_1_1_core_1_1_list_base_1a07367730f182c6b9c02aa566b76b152f" prot="protected" virt="non-virtual"><scope>Canberra::Utility::Core::ListBase</scope><name>_List</name></member>
      <member refid="d9/d6e/class_canberra_1_1_utility_1_1_core_1_1_list_base_1a35fd987bd3f0ae3fb917b838c1a2ee85" prot="protected" virt="non-virtual"><scope>Canberra::Utility::Core::ListBase</scope><name>_Num</name></member>
      <member refid="d9/d6e/class_canberra_1_1_utility_1_1_core_1_1_list_base_aaacf0eb537ee5765a6929dc4dd42c04b_1aaacf0eb537ee5765a6929dc4dd42c04b" prot="public" virt="non-virtual"><scope>Canberra::Utility::Core::ListBase</scope><name>Add</name></member>
      <member refid="d9/d6e/class_canberra_1_1_utility_1_1_core_1_1_list_base_ab8431d144c5e017b9e06502549f26833_1ab8431d144c5e017b9e06502549f26833" prot="public" virt="non-virtual"><scope>Canberra::Utility::Core::ListBase</scope><name>Clear</name></member>
      <member refid="d9/d6e/class_canberra_1_1_utility_1_1_core_1_1_list_base_1ad8b3c4d1f6cbba04f6495d5d13a6f0b5" prot="protected" virt="non-virtual"><scope>Canberra::Utility::Core::ListBase</scope><name>Copy</name></member>
      <member refid="d9/d6e/class_canberra_1_1_utility_1_1_core_1_1_list_base_a2349c775780c9b7441411c96318a6639_1a2349c775780c9b7441411c96318a6639" prot="public" virt="non-virtual"><scope>Canberra::Utility::Core::ListBase</scope><name>GetItem</name></member>
      <member refid="d9/d6e/class_canberra_1_1_utility_1_1_core_1_1_list_base_1a0385763ebdcfda55e401ba477fb78ed0" prot="public" virt="non-virtual"><scope>Canberra::Utility::Core::ListBase</scope><name>GetNumberOfItems</name></member>
      <member refid="d9/d6e/class_canberra_1_1_utility_1_1_core_1_1_list_base_1aba1876d4b041d1d3efa90d404bb6ba5f" prot="public" virt="non-virtual"><scope>Canberra::Utility::Core::ListBase</scope><name>ListBase</name></member>
      <member refid="d9/d6e/class_canberra_1_1_utility_1_1_core_1_1_list_base_1a7e4d30726d87a96b7d9be1236f661ba3" prot="public" virt="non-virtual"><scope>Canberra::Utility::Core::ListBase</scope><name>ListBase</name></member>
      <member refid="d9/d6e/class_canberra_1_1_utility_1_1_core_1_1_list_base_a56a9f21b1e389b0b057ed3a200130b91_1a56a9f21b1e389b0b057ed3a200130b91" prot="public" virt="non-virtual"><scope>Canberra::Utility::Core::ListBase</scope><name>operator=</name></member>
      <member refid="d9/d6e/class_canberra_1_1_utility_1_1_core_1_1_list_base_a280204e71e12060a321cc5e12753e65d_1a280204e71e12060a321cc5e12753e65d" prot="public" virt="virtual"><scope>Canberra::Utility::Core::ListBase</scope><name>~ListBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
